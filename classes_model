import pyomo.environ as pyo
import pandas as pd

path_output = './output/'
path_input = './input/'
name_file = 'df_input_test.xlsx'

df_input_series = pd.read_excel(path_input + name_file,sheet_name = 'series')
df_conect = pd.read_excel(path_input + 'c_matrix.xlsx', sheet_name = 'conect')

# ---------------------------------------------------------------------------------------------------------------------
# region start

#model
model = pyo.AbstractModel()

#sets
model.HOURS = pyo.Set()

#parameters series
model.cost_x = pyo.Param(model.HOURS)
model.cost_y = pyo.Param(model.HOURS)
model.demand = pyo.Param(model.HOURS)

#variables
model.quant_x = pyo.Var(model.HOURS, domain = pyo.NonNegativeReals)
model.quant_y = pyo.Var(model.HOURS, domain = pyo.NonNegativeReals)

#objective
def objective_rule(model, t):
    return sum(model.quant_x[t] * model.cost_x[t] + model.quant_y[t] * model.cost_y[t] for t in model.HOURS)

model.objectiveRule = pyo.Objective(rule=objective_rule, sense=pyo.minimize)

# endregion
# ---------------------------------------------------------------------------------------------------------------------
# region creating strings of constraints

df_conect.set_index(df_conect['from'],inplace=True)
df_conect.index.name = None
df_conect.drop(['from'],axis = 1,inplace=True)

list_variables_conect = []
list_energy_from = []
list_energy_to_total = []
for i in range(0,len(df_conect)):
    list_energy_to = []
    for j in df_conect.columns:
        if df_conect[j].iloc[i] == 1:
            list_energy_to.append(j)
    if list_energy_to != []:
        list_energy_to_total.append(list_energy_to)
        list_energy_from.append(df_conect.index[i])

df_conect = pd.DataFrame({'energy from':list_energy_from,
                          'energy to':list_energy_to_total})

list_string_total = []
for i in range(0,len(df_conect)):
    string_partial = ''
    string_partial ='model.E_' + str(df_conect['energy from'].iloc[i]) + '[t]' '== model.E_' + str(df_conect['energy from'].iloc[i]) + '_' +str(df_conect['energy to'].iloc[i][0])+ '[t]'
    for j in range(1,len(df_conect['energy to'].iloc[i])):
        string_partial = string_partial + '+model.E_' + str(df_conect['energy from'].iloc[i]) + '_' + str(df_conect['energy to'].iloc[i][j])+ '[t]'
    list_string_total.append(string_partial)
print(list_string_total)

# endregion
# ---------------------------------------------------------------------------------------------------------------------
# region constriant builder


class ConstraintBuilder:
    def __init__(self, model):
        self.model = model

    def create_constraint(self, constraint_name, expression_str):
        expression = eval(expression_str, globals(), locals())
        setattr(self, constraint_name, expression)
        constraint = pyo.Constraint(expr=expression)
        setattr(self.model, constraint_name, constraint)

builder = ConstraintBuilder(model)
model.constraint_builder = builder

constraint_number = 1
for i in list_string_total:
    model.constraint_builder.create_constraint('Con '+str(constraint_number), i)


# endregion
# ---------------------------------------------------------------------------------------------------------------------
# region creating constriants from classes


# #constraints
# class ClassConstraints:
#     def constraint_1(model, t):
#         return model.demand[t] == model.quant_x[t] + model.quant_y[t]

# classconstraint = ClassConstraints

# model.demandRule = pyo.Constraint(model.HOURS, rule=classconstraint.constraint_1)

# # endregion
# # ---------------------------------------------------------------------------------------------------------------------
# # region reading data

# data = pyo.DataPortal()
# data['HOURS'] = df_input_series['HOURS'].tolist()
# data['cost_x'] = df_input_series.set_index('HOURS')['cost_x'].to_dict()
# data['cost_y'] = df_input_series.set_index('HOURS')['cost_y'].to_dict()
# data['demand'] = df_input_series.set_index('HOURS')['demand'].to_dict()

# # endregion
# # ---------------------------------------------------------------------------------------------------------------------
# # creating instance of model

# #generating instance
# instance = model.create_instance(data)

# # solving the model
# optimizer = pyo.SolverFactory('cplex')
# results = optimizer.solve(instance)

# # displaying the results
# instance.display()
