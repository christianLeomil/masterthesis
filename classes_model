import pyomo.environ as pyo
import pandas as pd

path_output = './output/'
path_input = './input/'
name_file = 'df_input_test.xlsx'

df_input_series = pd.read_excel(path_input + name_file,sheet_name = 'series')
# df_input_other = pd.read_excel(path_input + name_file,sheet_name = 'other')

# ---------------------------------------------------------------------------------------------------------------------
# region start

#model
model = pyo.AbstractModel()

#sets
model.HOURS = pyo.Set()

#parameters series
model.cost_x = pyo.Param(model.HOURS)
model.cost_y = pyo.Param(model.HOURS)
model.demand = pyo.Param(model.HOURS)

#variables
model.quant_x = pyo.Param(model.HOURS, domain = pyo.NonNegativeReals)
model.quant_y = pyo.Param(model.HOURS, domain = pyo.NonNegativeReals)

#objective
def objective_rule(model,t):
    return sum(model.quant_x(t) * model.cost_x(t) + model.quant_y(t) * model.cost_y(t) for t in model.HOURS)
model.objectiveRule = pyo.Objective(rule = objective_rule, sense = pyo.minimize)

#constraints
class ClassConstraints:
    def constraint_1():
        return 'model.demnad(t) = model.quant_x(t) + model.quant_y(t)'

classconstraint = ClassConstraints

model.demnadRule = pyo.Constraint(model.HOURS,rule = eval(classconstraint.constraint_1()))

# endregion
# ---------------------------------------------------------------------------------------------------------------------
# region variables

data = pyo.DataPortal()
data['HOURS'] = df_input_series['HOURS'].tolist()
data['cost_x'] = df_input_series.set_index('HOURS')['cost_x'].to_dict()
data['cost_y'] = df_input_series.set_index('HOURS')['cost_y'].to_dict()

#generating instance
instance = model.create_instance(data)

#solving the model
optimizer = pyo.SolverFactory('cplex')
results = optimizer.solve(instance)

# # Displaying the results
# instance.pprint()
instance.display()

# endregion
