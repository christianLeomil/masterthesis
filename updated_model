import pyomo.environ as pyo
import pandas as pd
import classes
import functions
import inspect
import textwrap 

# ---------------------------------------------------------------------------------------------------------------------
# region reading data

path_input = './input/'
path_output = './output/'
name_file = 'df_input.xlsx'

df_input_series = pd.read_excel(path_input +name_file, sheet_name= 'series')
df_input_other = pd.read_excel(path_input +name_file, sheet_name= 'other')
df_elements = pd.read_excel(path_input + name_file, sheet_name = 'elements')
[df_matrix, df_aux] = functions.matrix_creator(df_elements)

#endregion
# ---------------------------------------------------------------------------------------------------------------------
# region create classes


# input("Press Enter to continue...")

#endregion
# ---------------------------------------------------------------------------------------------------------------------
# region abstract creating model

#model
model = pyo.AbstractModel()

#sets
model.HOURS = pyo.Set()

#endregion
# ---------------------------------------------------------------------------------------------------------------------
# region abstract creating model

#parameter scalar
model.time_step = pyo.Param()
model.pv1_eff = pyo.Param()

model.starting_SOC = pyo.Param()
model.E_bat1_max = pyo.Param()

#parameters series
model.P_solar = pyo.Param(model.HOURS) #time series with solar energy
model.P_to_demand1 = pyo.Param(model.HOURS) #time series with solar energy
model.costBuy = pyo.Param(model.HOURS) #time series with costs of buying energy
model.costSell = pyo.Param(model.HOURS) #time series with price of energy being sold to grid

#endregion
# ---------------------------------------------------------------------------------------------------------------------
# region creating variables

model.P_to_net1 = pyo.Var(model.HOURS, within = pyo.NonNegativeReals)
model.P_from_net1 = pyo.Var(model.HOURS, within = pyo.NonNegativeReals)
model.P_net1_demand1 = pyo.Var(model.HOURS, within = pyo.NonNegativeReals)
model.P_net1_bat1 = pyo.Var(model.HOURS, within = pyo.NonNegativeReals)

model.P_from_pv1 = pyo.Var(model.HOURS, within = pyo.NonNegativeReals)
model.P_pv1_net1 = pyo.Var(model.HOURS, within = pyo.NonNegativeReals)
model.P_pv1_bat1 = pyo.Var(model.HOURS, within = pyo.NonNegativeReals)
model.P_pv1_demand1 = pyo.Var(model.HOURS, within = pyo.NonNegativeReals)

model.SOC = pyo.Var(model.HOURS, within = pyo.NonNegativeReals, bounds=(0, 1))
model.P_to_bat1 = pyo.Var(model.HOURS, within = pyo.NonNegativeReals)
model.P_from_bat1 = pyo.Var(model.HOURS, within = pyo.NonNegativeReals)
model.P_bat1_net1 = pyo.Var(model.HOURS, within = pyo.NonNegativeReals)
model.P_bat1_demand1 = pyo.Var(model.HOURS, within = pyo.NonNegativeReals)

model.K_ch = pyo.Var(model.HOURS, domain = pyo.Binary)
model.K_dis = pyo.Var(model.HOURS, domain = pyo.Binary)

model.E_sell = pyo.Var(model.HOURS, within = pyo.NonNegativeReals)
model.E_buy = pyo.Var(model.HOURS, within = pyo.NonNegativeReals)

#endregion
# ---------------------------------------------------------------------------------------------------------------------
# region creating contraints from classes

class MyClass:
     pass

print(df_aux) 

for i in df_aux.index:
    element = df_aux['element'].iloc[i]
    class_type = df_aux['type'].iloc[i]
    if class_type in ['bat','pv']:
        myObj = getattr(classes, class_type)

        for j in dir(myObj):
            if j.startswith('__'):
                pass
            else:
                # Get the original method
                original_method = getattr(myObj,j)
                print(original_method)
                # Get the source code of the method
                source_code = inspect.getsource(original_method)
                source_code = textwrap.dedent(source_code)
                # Replace the parameter name
                modified_source_code = source_code.replace(class_type, element)
                print(modified_source_code)
                # Compile the modified source code
                compiled_code = compile(modified_source_code, "<string>", "exec")
                # Create a namespace dictionary for execution
                namespace = {}
                # Execute the compiled code in the namespace
                exec(compiled_code, namespace)
                # Get the modified method from the namespace
                modified_method = namespace[j] 
                # Set the modified method as the new method_1
                setattr(MyClass, j, modified_method)

constraint_num = 1
for i in dir(MyClass):
      if i.startswith('__'):
            pass
      else:
           method = getattr(MyClass,i)
           model.add_component('Constraint'+ str(constraint_num), pyo.Constraint(model.HOURS, rule = method))
           constraint_num += 1

#endregion
# ---------------------------------------------------------------------------------------------------------------------
# region creating connection constraints 


# endregion
# ---------------------------------------------------------------------------------------------------------------------
# region other constraints

#demand rule
def demand_rule(model,t):
    return model.P_to_demand1[t] == model.P_pv1_demand1[t] + model.P_net1_demand1[t] + model.P_bat1_demand1[t]
model.demandRule = pyo.Constraint(model.HOURS,rule = demand_rule)

#net_rule
def net_rule(model,t):
     return model.P_from_net1[t] == model.P_to_demand1[t] + model.P_net1_bat1[t]
model.netRule = pyo.Constraint(model.HOURS, rule = net_rule)

def pv_rule(model,t):
    return model.P_from_pv1[t] == model.P_pv1_bat1[t] + model.P_pv1_net1[t] + model.P_pv1_demand1[t]
model.pvRule = pyo.Constraint(model.HOURS, rule = pv_rule)

def charge_rule(model,t):
     return model.P_to_bat1[t] == model.P_pv1_bat1[t] + model.P_net1_bat1[t]
model.chargeRule = pyo.Constraint(model.HOURS,rule = charge_rule)

def discharge_rule(model,t):
     return model.P_from_bat1[t] == model.P_bat1_net1[t] + model.P_bat1_demand1[t]
model.dischargeRule = pyo.Constraint(model.HOURS,rule = discharge_rule)

#related to objective rule
def sell_rule(model,t):
     return model.P_to_net1[t] == model.P_pv1_net1[t] + model.P_bat1_net1[t]
model.sellRule = pyo.Constraint(model.HOURS,rule = sell_rule)

def sell_energy(model,t):
    return model.E_sell[t] == model.P_to_net1[t] * model.time_step
model.sellEnergy = pyo.Constraint(model.HOURS, rule = sell_energy)

def buy_energy(model,t):
     return model.E_buy[t] == model.P_from_net1[t] * model.time_step  
model.buyEnergy = pyo.Constraint(model.HOURS, rule = buy_energy)

# endregion
# ---------------------------------------------------------------------------------------------------------------------
# region objective

#objective function
def objective_rule(model,t):
     return sum(model.E_buy[t] * model.costBuy[t] - model.E_sell[t] * model.costSell[t] for t in model.HOURS)
model.objectiveRule = pyo.Objective(rule = objective_rule,sense= pyo.minimize)

# endregion
# ---------------------------------------------------------------------------------------------------------------------
# region reading data

#reading data
data = pyo.DataPortal()
data['HOURS'] = df_input_series['HOURS'].tolist()
data['P_solar'] = df_input_series.set_index('HOURS')['P_solar'].to_dict()
data['P_to_demand1'] = df_input_series.set_index('HOURS')['P_to_demand1'].to_dict()
data['costBuy'] = df_input_series.set_index('HOURS')['costBuy'].to_dict()
data['costSell'] = df_input_series.set_index('HOURS')['costSell'].to_dict()

data['pv1_eff'] = {None:df_input_other.loc[df_input_other['Parameter'] == 'pv1_eff', 'Value'].values[0]}
data['E_bat1_max'] = {None:df_input_other.loc[df_input_other['Parameter'] == 'E_bat1_max', 'Value'].values[0]}
data['starting_SOC'] = {None:df_input_other.loc[df_input_other['Parameter'] == 'starting_SOC', 'Value'].values[0]}
data['time_step'] = {None:df_input_other.loc[df_input_other['Parameter'] == 'time_step', 'Value'].values[0]}


# endregion
# ---------------------------------------------------------------------------------------------------------------------
# region starting model

#generating instance
instance = model.create_instance(data)

print("Constraint Expressions:")
for constraint in instance.component_objects(pyo.Constraint):
    for index in constraint:
        print(f"{constraint}[{index}]: {constraint[index].body}")

#solving the model
optimizer = pyo.SolverFactory('cplex')
results = optimizer.solve(instance)

# # Displaying the results
# instance.pprint()
instance.display()

#endregion